
  # CVE Integration Rules for Popular JavaScript Crypto Libraries
  - id: js-cve-node-crypto
    languages: [javascript, typescript]
    message: "Node.js crypto vulnerable version detected (CVE-2022-35256, <18.7.0)"
    severity: ERROR
    patterns:
      - pattern: "require('crypto')"
      - pattern: "import crypto from 'crypto'"
    metadata: { library: "node-crypto", cve: "CVE-2022-35256", vulnerable_versions: "<18.7.0" }

  - id: js-cve-cryptojs
    languages: [javascript, typescript]
    message: "crypto-js vulnerable version detected (CVE-2022-31129, <4.1.0)"
    severity: ERROR
    patterns:
      - pattern: "require('crypto-js')"
      - pattern: "import CryptoJS from 'crypto-js'"
    metadata: { library: "crypto-js", cve: "CVE-2022-31129", vulnerable_versions: "<4.1.0" }

  - id: js-cve-node-forge
    languages: [javascript, typescript]
    message: "node-forge vulnerable version detected (CVE-2022-24771, <1.3.1)"
    severity: ERROR
    patterns:
      - pattern: "require('node-forge')"
      - pattern: "import forge from 'node-forge'"
    metadata: { library: "node-forge", cve: "CVE-2022-24771", vulnerable_versions: "<1.3.1" }

  - id: js-cve-webcrypto
    languages: [javascript, typescript]
    message: "WebCrypto API usage (check browser CVEs manually)"
    severity: WARNING
    patterns:
      - pattern: "window.crypto.subtle"
      - pattern: "crypto.subtle"
    metadata: { library: "webcrypto", cve: "manual-check" }

  - id: js-cve-sjcl
    languages: [javascript, typescript]
    message: "SJCL vulnerable version detected (CVE-2017-18236, <1.0.7)"
    severity: ERROR
    patterns:
      - pattern: "require('sjcl')"
      - pattern: "import sjcl from 'sjcl'"
    metadata: { library: "sjcl", cve: "CVE-2017-18236", vulnerable_versions: "<1.0.7" }

  - id: js-cve-bsafejs
    languages: [javascript, typescript]
    message: "BSAFE JavaScript SDK usage detected (check for CVEs manually)"
    severity: WARNING
    patterns:
      - pattern: "require('bsafe')"
      - pattern: "import bsafe from 'bsafe'"
    metadata: { library: "bsafe", cve: "manual-check" }
rules:
  - id: js-test-md5
    languages: [javascript, typescript]
    message: "MD5 hash usage detected"
    severity: WARNING
    patterns:
      - pattern: "crypto.createHash('md5')"

  - id: js-node-crypto-sha256-sha512
    languages: [javascript, typescript]
    message: "SHA-256/SHA-512 via Node crypto"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "crypto.createHash('sha256')"
          - pattern: "crypto.createHash('sha512')"

  - id: js-node-forge-sha2
    languages: [javascript, typescript]
    message: "SHA-256 / SHA-512 via node-forge"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "forge.md.sha256.create()"
          - pattern: "forge.md.sha512.create()"

  - id: js-webcrypto-sha2
    languages: [javascript, typescript]
    message: "SHA-256 / SHA-512 via WebCrypto"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "crypto.subtle.digest('SHA-256', ...)"
          - pattern: "crypto.subtle.digest('SHA-512', ...)"
          - pattern: "window.crypto.subtle.digest('SHA-256', ...)"
          - pattern: "window.crypto.subtle.digest('SHA-512', ...)"

  # ==== Symmetric (AES) ====
  - id: js-node-crypto-ecb
    languages: [javascript, typescript]
    message: "AES-ECB used (insecure)"
    severity: ERROR
    patterns:
      - pattern-either:
          - pattern: "crypto.createCipheriv('aes-128-ecb', $KEY, null)"
          - pattern: "crypto.createCipher('aes-128-ecb', $KEY)"

  - id: js-cryptojs-ecb
    languages: [javascript, typescript]
    message: "CryptoJS AES ECB mode"
    severity: ERROR
    patterns:
      - pattern: "CryptoJS.AES.encrypt($D, $K, { mode: CryptoJS.mode.ECB })"

  - id: js-node-forge-aes-cbc
    languages: [javascript, typescript]
    message: "AES-CBC used via node-forge"
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: "forge.cipher.createCipher('AES-CBC', ...)"
          - pattern: "forge.cipher.createDecipher('AES-CBC', ...)"

  - id: js-node-forge-aes-gcm
    languages: [javascript, typescript]
    message: "AES-GCM used via node-forge"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "forge.cipher.createCipher('AES-GCM', ...)"
          - pattern: "forge.cipher.createDecipher('AES-GCM', ...)"

  # ==== RNG / IV / keys ====
  - id: js-node-crypto-randombytes
    languages: [javascript, typescript]
    message: "Random bytes via Node crypto"
    severity: INFO
    patterns:
      - pattern: "crypto.randomBytes(...)"

  - id: js-node-forge-random
    languages: [javascript, typescript]
    message: "Random bytes via node-forge"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "forge.random.getBytesSync(...)"
          - pattern: "forge.random.getBytes(...)"

  # ==== RSA / OAEP ====
  - id: js-node-crypto-public-encrypt
    languages: [javascript, typescript]
    message: "RSA publicEncrypt usage"
    severity: INFO
    patterns:
      - pattern: "crypto.publicEncrypt(...)"

  - id: js-rsa-oaep-config
    languages: [javascript, typescript]
    message: "RSA-OAEP configuration detected"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: '"RSA-OAEP"'
          - pattern: '"RSA-OAEP-256"'
          - pattern: "oaepHash: 'sha256'"
          - pattern: 'oaepHash: "sha256"'

  # ==== Helpers / misc ====
  - id: js-generate-aes-128
    languages: [javascript, typescript]
    message: "AES-128 key generation"
    severity: INFO
    patterns:
      - pattern-either:
          - pattern: "generateSecretKey('AES', 128, ...)"
          - pattern: 'generateSecretKey("AES", 128, ...)'
